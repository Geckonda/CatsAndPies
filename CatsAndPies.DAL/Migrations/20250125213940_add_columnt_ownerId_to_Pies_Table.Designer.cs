// <auto-generated />
using System;
using CatsAndPies.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CatsAndPies.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250125213940_add_columnt_ownerId_to_Pies_Table")]
    partial class add_columnt_ownerId_to_Pies_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CatsAndPies.Domain.Entities.CatEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdoptedTime")
                        .HasColumnType("date");

                    b.Property<int>("ColorId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PersonalityId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("PersonalityId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Cats");
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.Cats.CatsColorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HexColor")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CatsColors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HexColor = "FFFFFF",
                            Name = "Белый"
                        },
                        new
                        {
                            Id = 2,
                            HexColor = "000000",
                            Name = "Черный"
                        },
                        new
                        {
                            Id = 3,
                            HexColor = "D2691E",
                            Name = "Рыжий"
                        },
                        new
                        {
                            Id = 4,
                            HexColor = "A9A9A9",
                            Name = "Серый"
                        },
                        new
                        {
                            Id = 5,
                            HexColor = "7B3F00",
                            Name = "Шоколадный"
                        });
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.Cats.CatsPersonalityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CatsPersonalities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Считает себя лучше всех и не упустит момента показать свое превосходство. Часто саркастичен, но с оттенком высокомерия.",
                            Name = "Заносчивый"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Этот кот всегда говорит философским тоном, любит поучать и делиться своей «мудростью». Возможно, его реплики звучат как древние пословицы или загадки.",
                            Name = "Мудрый"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Постоянно задает вопросы, интересуется всем подряд, будто бы видит все впервые. В его репликах часто встречаются удивление и восторг.",
                            Name = "Любопытный"
                        });
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.ExceptionLogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ExceptionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("ExceptionTime")
                        .HasColumnType("timestamp");

                    b.Property<string>("ExceptionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ExceptionTime");

                    b.ToTable("ExceptionLogs", (string)null);
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.PiesTables.PieEffectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RarityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RarityId");

                    b.ToTable("PiesEffects");
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.PiesTables.PieEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EffectId")
                        .HasColumnType("integer");

                    b.Property<string>("ImgLink")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Pies");
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.PiesTables.RarityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Chance")
                        .HasColumnType("DOUBLE PRECISION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Rarities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Chance = 60.0,
                            Name = "Обычный"
                        },
                        new
                        {
                            Id = 2,
                            Chance = 25.0,
                            Name = "Необычный"
                        },
                        new
                        {
                            Id = 3,
                            Chance = 10.0,
                            Name = "Редкий"
                        },
                        new
                        {
                            Id = 4,
                            Chance = 4.0,
                            Name = "Эпический"
                        },
                        new
                        {
                            Id = 5,
                            Chance = 0.90000000000000002,
                            Name = "Легендарный"
                        },
                        new
                        {
                            Id = 6,
                            Chance = 0.10000000000000001,
                            Name = "Мифический"
                        });
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.QuestionnaireEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("ChillTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Dish")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Dream")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Film")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Flower")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Hobby")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PositiveTraits")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Singer")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Questionnaire", (string)null);
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.WalletEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("money");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.CatEntity", b =>
                {
                    b.HasOne("CatsAndPies.Domain.Entities.Cats.CatsColorEntity", "Color")
                        .WithMany("Cats")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatsAndPies.Domain.Entities.Cats.CatsPersonalityEntity", "Personality")
                        .WithMany("Cats")
                        .HasForeignKey("PersonalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatsAndPies.Domain.Entities.UserEntity", "Owner")
                        .WithOne("Cat")
                        .HasForeignKey("CatsAndPies.Domain.Entities.CatEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Owner");

                    b.Navigation("Personality");
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.PiesTables.PieEffectEntity", b =>
                {
                    b.HasOne("CatsAndPies.Domain.Entities.PiesTables.RarityEntity", "Rarity")
                        .WithMany("Effects")
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rarity");
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.PiesTables.PieEntity", b =>
                {
                    b.HasOne("CatsAndPies.Domain.Entities.PiesTables.PieEffectEntity", "Effect")
                        .WithMany("Pies")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatsAndPies.Domain.Entities.UserEntity", "Owner")
                        .WithMany("Pies")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.QuestionnaireEntity", b =>
                {
                    b.HasOne("CatsAndPies.Domain.Entities.UserEntity", "User")
                        .WithOne("Questionnaire")
                        .HasForeignKey("CatsAndPies.Domain.Entities.QuestionnaireEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("CatsAndPies.Domain.Entities.RoleEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.WalletEntity", b =>
                {
                    b.HasOne("CatsAndPies.Domain.Entities.UserEntity", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("CatsAndPies.Domain.Entities.WalletEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.Cats.CatsColorEntity", b =>
                {
                    b.Navigation("Cats");
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.Cats.CatsPersonalityEntity", b =>
                {
                    b.Navigation("Cats");
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.PiesTables.PieEffectEntity", b =>
                {
                    b.Navigation("Pies");
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.PiesTables.RarityEntity", b =>
                {
                    b.Navigation("Effects");
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.RoleEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CatsAndPies.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Cat");

                    b.Navigation("Pies");

                    b.Navigation("Questionnaire");

                    b.Navigation("Wallet");
                });
#pragma warning restore 612, 618
        }
    }
}
